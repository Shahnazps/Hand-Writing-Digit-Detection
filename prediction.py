# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15ZXK28_f6QmgK92lWjxQftSlTi_dvO_x
"""

import cv2
import tensorflow as tf
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from keras.models import load_model
from PIL import Image,ImageOps
from numpy import asarray
import numpy as np

image = r"/content/drive/My Drive/Datasets/digits/img7.jpg"
img_array = cv2.imread(image,cv2.IMREAD_GRAYSCALE)
plt.imshow(img_array,cmap="gray")
plt.show()
new_array = cv2.bitwise_not(img_array)
plt.imshow(new_array,cmap="gray")
plt.show()
'''im = Image.open("/content/drive/My Drive/Datasets/digits/img7.jpeg")
imgplot = plt.imshow(im)
plt.show()
im_invert = ImageOps.invert(im)
plt.imshow(im_invert)
plt.show()
img_array = asarray(im_invert)
print(type(img_array))
print(img_array.shape)'''

def prepare(image_path):
  img_size = 28
  img_array = cv2.imread(image_path,cv2.IMREAD_GRAYSCALE)
  img_array = cv2.bitwise_not(img_array)
  new_array = cv2.resize(img_array,(28,28))
  new_array = paddedImg(new_array)
  print(new_array.shape)
  plt.imshow(new_array,cmap="gray")
  new_array = new_array.reshape((1,img_size * img_size)).astype("float32")
  print(new_array.shape)
  new_array /= 255
  plt.show()
  return new_array

def paddedImg(img):
  ht, wd= img.shape
  ww = 50
  hh = 50
  color = 0
  result = np.full((hh,ww), color, dtype=np.uint8)
  xx = (ww - wd) // 2
  yy = (hh - ht) // 2
  result[yy:yy+ht, xx:xx+wd] = img
  return cv2.resize(result,(28,28))

image = r"/content/drive/My Drive/Datasets/digits/img7.jpg"
model = tf.keras.models.load_model(r"/content/drive/My Drive/Datasets/digits/digits.model")
prediction = model.predict_classes(prepare(image))
print(prediction)

nums = [1,2,3,5,7,8]
for i in nums:
  image = r"/content/drive/My Drive/Datasets/digits/img"+str(i)+".jpg"
  prediction = model.predict_classes(prepare(image))
  print("Predicted : ",prediction)
  print("Actual :",str(i))
  print("Correctly predicted" if prediction == i else "Incorrectly predicted")

