# -*- coding: utf-8 -*-
"""handwritting_digits_images.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_tZLhb8d2yT4U69G_bRUJUJB60d3U3R
"""

import numpy as np
from keras.datasets import mnist
from keras.models import Sequential,load_model
from keras.layers.core import Dense,Dropout,Activation
from keras.utils import np_utils
import matplotlib.pyplot as plt

(X_train,Y_train),(X_test,Y_test) = mnist.load_data()

for i in range(9):
  plt.subplot(3,3,i+1)
  plt.tight_layout()
  plt.imshow(X_train[i],cmap="gray",interpolation="none")
  plt.title("Digit: {}".format(Y_train[i]))
  plt.xticks([])
  plt.yticks([])

#pixel distribution
p = X_train[0].shape[0]
pixel = p*p
plt.subplot(2,1,1)
plt.imshow(X_train[0],cmap="gray",interpolation="none")
plt.title("Digit: {}".format(Y_train[0]))
plt.xticks([])
plt.yticks([])
plt.subplot(2,1,2)
plt.hist(X_train[0].reshape(pixel))
plt.title("Pixel value distribution")

#shape before reshaping and normalizing
print("X_train shape",X_train.shape)
print("Y_train.shape",Y_train.shape)
print("X_test shape",X_test.shape)
print("Y_test shape",Y_test.shape)

#reshaping 
X_train = X_train.reshape(X_train.shape[0],pixel).astype("float32")
X_test = X_test.reshape(X_test.shape[0],pixel).astype("float32")

#normalizing
X_train /=255
X_test /=255

#After reshaping and normalizing
print("Train matrix shape",X_train.shape)
print("Test matrix shape",X_test.shape)

#one hot encoding
n_classes = 10
y_train = np_utils.to_categorical(Y_train,n_classes)
y_test = np_utils.to_categorical(Y_test,n_classes)
print(y_test.shape)

inp = X_train.shape[1]

model = Sequential()

model.add(Dense(784,input_shape=(inp,)))
model.add(Activation("relu"))
model.add(Dropout(0.3))

model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.3))

model.add(Dense(512))
model.add(Activation("relu"))
model.add(Dropout(0.3))

model.add(Dense(10))
model.add(Activation("softmax"))

model.compile(optimizer="adam",loss="categorical_crossentropy",metrics=["accuracy"])
model.summary()

history = model.fit(X_train,y_train,batch_size=128,epochs=20,validation_data=(X_test,y_test))
model.save("/content/drive/My Drive/Datasets/digits/digits.model")

#plotting metrics

plt.subplot(2,1,1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title("model accuracy")
plt.ylabel("accuracy")
plt.xlabel("epoch")
plt.legend(["train","test"],loc="lower right")

plt.subplot(2,1,2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title("model loss")
plt.ylabel("loss")
plt.xlabel("epoch")
plt.legend(["train","test"],loc="lower right")

plt.tight_layout()

#evaluation

mnist_model = load_model("/content/drive/My Drive/Datasets/digits/digits.model")
loss_and_metrics = mnist_model.evaluate(X_test,y_test,verbose = 2)

print("Test Loss",loss_and_metrics[0])
print("Test Accuracy",loss_and_metrics[1])

mnist_model = load_model("/content/drive/My Drive/Datasets/digits/digits.model")
predicted_classes = mnist_model.predict_classes(X_test)
#print(predicted_classes)
#print(Y_test)

correct_indices = np.nonzero(predicted_classes == Y_test)[0]
incorrect_indices = np.nonzero(predicted_classes != Y_test)[0]
print()
print(len(correct_indices)," classified correctly")
print(len(incorrect_indices)," classified incorrectly")

#adapt figure size to accomodate 18 subplots

plt.rcParams["figure.figsize"] = (7,14)

figure_evaluation = plt.figure()

#plot 9 correct predictions
for i,correct in enumerate(correct_indices[:9]):
  plt.subplot(6,3,i+1)
  plt.imshow(X_test[correct].reshape(p,p),cmap="gray",interpolation="none")
  plt.title("Predicted: {},Truth: {}".format(predicted_classes[correct],Y_test[correct]))
  plt.xticks([])
  plt.yticks([])

#plot 9 incorrect predictions
for i,incorrect in enumerate(incorrect_indices[:9]):
  plt.subplot(6,3,i+10)
  plt.imshow(X_test[incorrect].reshape(p,p),cmap="gray",interpolation="none")
  plt.title("Predicted: {},Truth: {}".format(predicted_classes[incorrect],Y_test[incorrect]))
  plt.xticks([])
  plt.yticks([])

